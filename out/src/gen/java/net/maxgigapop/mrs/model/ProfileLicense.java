/*
 * StackV Orchestrator Developer API
 * Documentation for the client-accessible endpoints of the StackV orchestrator.
 *
 * The version of the OpenAPI document: 0.8.2
 * Contact: alberto.est.jimenez@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package net.maxgigapop.mrs.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * A license given to a user to allow execution and possible customization of a profile.
 */
@ApiModel(description = "A license given to a user to allow execution and possible customization of a profile.")
@JsonPropertyOrder({
  ProfileLicense.JSON_PROPERTY_USERNAME,
  ProfileLicense.JSON_PROPERTY_TYPE,
  ProfileLicense.JSON_PROPERTY_REMAINING
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2025-07-10T09:14:01.648708-07:00[America/Los_Angeles]", comments = "Generator version: 7.14.0")
public class ProfileLicense   {
  public static final String JSON_PROPERTY_USERNAME = "username";
  @JsonProperty(JSON_PROPERTY_USERNAME)
  private String username;

  /**
   * The type of license, tickets are only good for one instance creation, whereas allocations are returned when instances are deleted.
   */
  public enum TypeEnum {
    TICKET("ticket"),
    
    ALLOCATION("allocation");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  @JsonProperty(JSON_PROPERTY_TYPE)
  private TypeEnum type;

  public static final String JSON_PROPERTY_REMAINING = "remaining";
  @JsonProperty(JSON_PROPERTY_REMAINING)
  private BigDecimal remaining;

  public ProfileLicense username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The user that is being given the license.
   * @return username
   **/
  @JsonProperty(value = "username")
  @ApiModelProperty(example = "[\"xyang\"]", required = true, value = "The user that is being given the license.")
  @NotNull 
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public ProfileLicense type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of license, tickets are only good for one instance creation, whereas allocations are returned when instances are deleted.
   * @return type
   **/
  @JsonProperty(value = "type")
  @ApiModelProperty(required = true, value = "The type of license, tickets are only good for one instance creation, whereas allocations are returned when instances are deleted.")
  @NotNull 
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public ProfileLicense remaining(BigDecimal remaining) {
    this.remaining = remaining;
    return this;
  }

  /**
   * For tickets, the number of remaining tickets. For allocations, the maximum number of active instances allowed at one time.
   * @return remaining
   **/
  @JsonProperty(value = "remaining")
  @ApiModelProperty(required = true, value = "For tickets, the number of remaining tickets. For allocations, the maximum number of active instances allowed at one time.")
  @NotNull @Valid 
  public BigDecimal getRemaining() {
    return remaining;
  }

  public void setRemaining(BigDecimal remaining) {
    this.remaining = remaining;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProfileLicense profileLicense = (ProfileLicense) o;
    return Objects.equals(this.username, profileLicense.username) &&
        Objects.equals(this.type, profileLicense.type) &&
        Objects.equals(this.remaining, profileLicense.remaining);
  }

  @Override
  public int hashCode() {
    return Objects.hash(username, type, remaining);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProfileLicense {\n");
    
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    remaining: ").append(toIndentedString(remaining)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

