/*
 * StackV Orchestrator Developer API
 * Documentation for the client-accessible endpoints of the StackV orchestrator.
 *
 * The version of the OpenAPI document: 0.8.2
 * Contact: alberto.est.jimenez@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package net.maxgigapop.mrs.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import net.maxgigapop.mrs.model.AllocationRequestAllocate;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * This schema represents a request to allocate a new address from a specified pool.
 */
@ApiModel(description = "This schema represents a request to allocate a new address from a specified pool.")
@JsonPropertyOrder({
  AllocationRequest.JSON_PROPERTY_NAME,
  AllocationRequest.JSON_PROPERTY_TYPE,
  AllocationRequest.JSON_PROPERTY_ALLOCATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2025-07-10T09:14:01.648708-07:00[America/Los_Angeles]", comments = "Generator version: 7.14.0")
public class AllocationRequest   {
  public static final String JSON_PROPERTY_NAME = "name";
  @JsonProperty(JSON_PROPERTY_NAME)
  private String name;

  public static final String JSON_PROPERTY_TYPE = "type";
  @JsonProperty(JSON_PROPERTY_TYPE)
  private String type;

  public static final String JSON_PROPERTY_ALLOCATE = "allocate";
  @JsonProperty(JSON_PROPERTY_ALLOCATE)
  private AllocationRequestAllocate allocate;

  public AllocationRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the allocation.
   * @return name
   **/
  @JsonProperty(value = "name")
  @ApiModelProperty(example = "Rucio Test IP", required = true, value = "The name of the allocation.")
  @NotNull 
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public AllocationRequest type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of address.
   * @return type
   **/
  @JsonProperty(value = "type")
  @ApiModelProperty(example = "IPv4", required = true, value = "The type of address.")
  @NotNull 
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public AllocationRequest allocate(AllocationRequestAllocate allocate) {
    this.allocate = allocate;
    return this;
  }

  /**
   * Get allocate
   * @return allocate
   **/
  @JsonProperty(value = "allocate")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public AllocationRequestAllocate getAllocate() {
    return allocate;
  }

  public void setAllocate(AllocationRequestAllocate allocate) {
    this.allocate = allocate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllocationRequest allocationRequest = (AllocationRequest) o;
    return Objects.equals(this.name, allocationRequest.name) &&
        Objects.equals(this.type, allocationRequest.type) &&
        Objects.equals(this.allocate, allocationRequest.allocate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, allocate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllocationRequest {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    allocate: ").append(toIndentedString(allocate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

